"use strict";
exports.Library = {
    "attrib": {
        "add": " ATTRIB '%_PkgTarget%\\*.*' '+C' /Sub",
        "example": "ATTRIB '%_PkgTarget%\\*.*' '+C' /SubATTRIB '%_Windows%\\Win.ini' '-R'ATTRIB '%_Windows%\\Win.ini' ''",
        "description": "Sets / modifies attributes on certain files / directories.You can either specify absolute attributes (overwriting any previous attributes) - e.g. 'R', or you can modify the attributes considering previous attributes - e.g. '+R'.",
        "parameters": "file pattern\tFile name, directory name or filepattern for files that should be updated\nattributes\tAbsolute attributes - e.g. \"R\", or relative attributes  like \"+R\"\n\tPossible characters to be used:\n\t+ adds the specific attribute\n\t- removes the specific attribute\n\tA: Archive attribute\n\tH: Hidden attribute\n\tS: System attribute\n\tR: Readonly attribute\n\tC: Compressed attribute\n/Sub\tProcess also subdirectories\n/NoErrors\tThis switch causes Columbus to ignore errors if the attributes can not be set.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "ATTRIB 'file pattern' 'attributes' [/Sub] [[/NoFileSystemRedirection] [/NoErrors] "
    },
    "system": {
        "add": " System Reboot",
        "example": "System Reboot at next possibility:System RebootSystem Reboot after end this script section:System Reboot ImmediatePerform a scripted User logout immediately:System Logout ImmediatePerform a scripted User logout after end of processing:System Logout",
        "description": "Perform a workstation reboot or send a message to all running processes about certain system updates.Allows to perform a scripted logout from within the user section of a script.",
        "parameters": "REBOOT\tReboots the current machine (Windows 9x and NT). If the Friendly Shutdown Option of CCONFIG is used, a Dialogbox with a 'cancel' option will be shown before the reboot takes place.\n\nIMMEDIATE\tCauses an immediate Reboot after installation of the current package. If the Friendly Shutdown Option of CCONFIG is used, a dialog box with a 'cancel' option will be shown before the reboot takes place.\n\nONREBOOTOPERATIONS\tOnly Reboots a machine if filerename or filereplace operations are pending.\n\nREFRESH\tSends a message to all processes that system settings have changed. (Not recommanded on newer OS than NT 4.0)\n\nLOGOUT\tAllows to perform a scripted logout from within the user section of a script.\n\n\n\n",
        "syntax": "SYSTEM REBOOTSYSTEM REBOOT IMMEDIATESYSTEM REBOOT ONREBOOTOPERATIONSSYSTEM REFRESHSYSTEM LOGOUTSYSTEM LOGOUT IMMEDIATE [/FORCE]"
    },
    "cancelsystemrestorepoint": {
        "add": " CancelSystemRestorePoint '%_LastSystemRestoreNumber%'",
        "example": "CancelSystemRestorePoint '17'",
        "description": "Abort and remove previously created System Restore point (if this feature is supported and enabled by the operating system)",
        "parameters": "SequenceNumber\tThe sequence number of the restore point to be cancelled. When creating a system restore with the SetSystemRestorePoint command the sequence number will be saved as %_LastSystemRestoreNumber%.\n/NoErrors\t\tThis switch causes Columbus to ignore any errors during that operation.",
        "syntax": "CancelSystemRestorePoint SequenceNumber [/NoErrors]"
    },
    "filesystemredirection": {
        "add": "FileSystemRedirection 'OFF'; Do something with %WINDIR%\\System32....FileSystemRedirection 'ON'",
        "example": "FileSystemRedirection 'OFF'; Do something with %WINDIR%\\System32....FileSystemRedirection 'ON'",
        "syntax": "FileSystemRedirection 'ON' ï¿½ 'OFF' [/NoErrors]",
        "description": "Microsoft automatically redirects certain directories on 64Bit operating system for 32Bit applications.E.g. on Vista X64 a 32Bit application (like Columbus) would not physically read write to %WINDIR%\\System32 when this directory is accessed, but instead all calls would get redirected to %WINDIR%\\SysWow64.Columbus itself has some builtin mechanisms to detect if that fileredirection should be turned off (e.g.when using the variable %_WindowsSystem64%) but with this command you can override it (e.g. for usage with Scripts).If the redirection is turned off, Columbus would also access %WINDIR%\\System32 physically in the above example.",
        "parameters": "State\t[TAB]'On' or 'OFF'\n/NoErrors\t[TAB]This switch causes Columbus to ignore any errors during enabling/disabling system file redirection.\n"
    },
    "iniread": {
        "add": " INIREAD 'section' 'key' 'default' 'file' 'variable'",
        "example": "INIREAD 'intl' 'sLanguage' 'eng' 'win.ini' 'IntVariable'INIREAD 'PersIPAdr' '%_User%' 'undefined' '\\\\srv1\\cfg\\ip.ini' 'myipadr'",
        "description": "Reads value from an INI file into a variable.Note: All parameters have to be enclosed within string delimiters. The VariableName has to be given without %..%.",
        "parameters": "Section\tTitle of the INI section to be read from\nKey\tKey to be read from\nDefaultvalue\tThe value to be given to the variable if the KEY does not exist\nFile\tFilename of the INIFILE to read from. If no path is specified, then the Windows user directory is assumed.\nVariableName\tThe name of the variable to which you want to assign the retrieved value\n/Script\tvariable is only valid during the execution of the script, from which the command gets executed. Best used, when the variable is only needed temporarely.\n/User\tWhen command is used in the UserAdd section and the user has no write access to the machine hive of the registry, this option must be used. Sets the variable in the user hive of the registry.\n/Machine \tVariable is set in the machine space. This is the default, when no parameter is specified.\n/Immediate\tNeeded, when a value gets read in the ServerAdd section and should be used in the same ServerAdd section. Cause variable to be set immediately instead of beeing written to the machvars.wms, where it would be available in the ClientAdd section\n/Volatile\t\tLoads the variables into the volatile environment, which will be deleted at next reboot. Best used for temporary variables in the ClientAdd or UserAdd section\n/NoErrors\tThis switch will ignore erros that might occur during reading the ini file.\n/NoFileSystemRedirection\n\t[TAB]On 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "INIREAD 'section' 'key' 'defaultvalue' 'file' 'VariableName' [/Script ï¿½ /User ï¿½ /Machine] [/Immediate] [/Volatile] [/NoErrors] [/NoFileSystemRedirection]"
    },
    "msipatch": {
        "add": " MSIPatch '%_PkgSource%\\Server\\MSI\\9b98631.msp' 'REINSTALL=\"ALL\"'/None /LOG:\"%_Windows%\\MSIPatch.Log\" /None",
        "example": "MSIPatch '%_PkgSource%\\Server\\MSI\\9b98631.msp' 'REINSTALL=\"ALL\"'/None /LOG:\"%_Windows%\\MSIPatch.Log\" /None",
        "description": "Applies the patches from an MSI patch file (.msp).",
        "parameters": "PatchFile\tName and location of the MSI patch file (use UNC notation if running from a networked source)\nCommandLine\tCommand line parameters\n\t\tNote from Microsoft: You must set the REINSTALL property on the command line when applying a small update or minor upgrade patch. Without this property, the patch is registered on the system but cannot update files. For patches that do not use a Custom Action Type 51 to automatically set the REINSTALL and REINSTALLMODE properties, the REINSTALL property must be explicitly set with the szCommandLine parameter. Set the REINSTALL property to list the features affected by the patch, or use a practical default setting of \"REINSTALL=ALL\". The default value of the REINSTALLMODE property is \"omus\". Beginning with Windows Installer version 3.0, the REINSTALL property is configured by the installer and does not need to be set on the command line.\n/Default\tShow the default user interface of MSI as specified in the package\n/Full\tShow complete user interface of MSI (requires user interaction)\n/Reduced\tShow partial user interface of MSI without requiring user selections\n/None\tShow no user interface at all, leave user interface to Columbus\n/Basic\tShow only progress information of MSI\n/Log:\"LogFile\"\tWrite a protocol file of the Installer actions. By default this file will get overwritten\n/AppendToLog\tAppends installer logging to the \"Logfile\" file instead of overwriting it\n/LogTypes:\"...\"\tWhat kind of messages should be protocolled. By default \"V\" is assumed. Possible values (which can get combined):\n\t\tV: Verbose, all messages\n\t\tF: Fatal Exit\n\t\tE: Error\n\t\tW: Warning\n\t\tU: User\n\t\tI: Info\n\t\tR: Resolvesource \n\t\tO: Out of disk space\n\t\tS: Action start\n\t\tD: Action data\n\t\tC: Common data\n\t\tP: Property dump\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "MSIPATCH 'PatchFile' 'CommandLine' [[/Default] [/Full] [/Reduced] [/None] [/Basic]] [/LOG:\"Logfile\"] [/AppendToLog] [/LogTypes:\"...\"] [/NoFileSystemRedirection]"
    },
    "register32": {
        "add": " REGISTER32 'mainkey' 'subkey' 'valname' 'value' 'type'",
        "example": "Writing a string value:Register32 'HKey_Current_User' 'Software\\Microsoft\\International' 'sLanguage' 'DES' 'REG_SZ'Writing a binary value:Register32 'HKey_Current_User' 'Software\\BrainWare\\Test' 'BinaryValue' 'H#4523A0' 'REG_BINARY'Creating a Key without specifying a value:Register32 'HKey_Current_User' 'Software\\BrainWare\\New Key'Appending to a Stringlist:Register32 'HKey_Current_User' 'Software\\Test' 'multi' 'test' 'REG_MULTI_SZ' /AddRemoving from a StringlistRegister32 'HKey_Local_Machine' 'System\\CurrentControlSet\\Services\\Eventlog\\Application' 'Sources' 'Java VM' 'REG_MULTI_SZ' /Remove",
        "description": "Registers keys and values in any of the WIN32 registry hives. Useful if you need to write a number of entries to the registry (as is often the case when installing an application).Note: The registry is the heart of the 32-bit systems (Windows NT and 95). Corrupting it by faulty values or incomplete settings may force a full reinstallation of Windows. Under NT, the registry is also protected by security profiles. So if you find that some REGISTER32 commands are not being performed, then this may be due to insufficient authorization of the user account running the script.",
        "parameters": "mainkey\tOne of the valid registry hives: HKey_Classes_Root HKey_Current_User HKey_Users HKey_Local_Machine HKey_Current_Config\t\nSubkey\tSubkey inside the hive to be built or to be opened for adding a value  (i.e., Software\\Microsoft\\Notepad).  Note: Subkeys have no leading backslash.\t\nvalname\tName of a value inside the specified tree. If no value and following parameters are specified, then only the key is created. Each key may have one value without a name. That one value can be created by specifying '' as the 'valname' parameter.\t\nvalue\tSpecifies the contents of a certain value (as defined by valname). Columbus currently supports values up to 999 bytes.\t\ntype\tThis specifies the type of data to be stored in a value. Allowed types are:\t\n\tREG_SZ\tStandard String\t\n\tREG_EXPAND_SZ\tString which contains Environment variables to be expanded\t\n\tREG_MULTI_SZ\tList of Strings (see also the additional /Add switch to handle such entries modular)\t\n\tREG_BINARY\tBinary data such as executables\t\n\tREG_NONE\tNo defined value type\t\n\tREG_DWORD\tDoubleWord (LongInteger)\t\n\tREG_DWORD_BIG_ENDIAN\t32-Bit Number (most significant byte per word is the low order byte)\t\n\tREG_DWORD_ LITTLE_ENDIAN\t32-Bit Number (most significant byte per word is the high order byte)\t\n\tREG_LINK\tUnicode symbolic link\t\n\tREG_RESOURCE_ LIST\tDevice driver resource list\t\n\tREG_QWORD\t64Bit number\n/Add\tWith REG_MULTI_SZ only\tAllows to append an entry to a REG_MULTI_SZ string without destroying its current contents or appending it in multiple copies\n/Remove\tWith REG_MULTI_SZ only\tAllows to delete an entry from a REG_MULTI_SZ string\n/Decrypt\tAllows to write a value into the registry that appears in encrypted form within a script (or external text file that its getting read from). Note that such entries must get created with PublicCrypt.Exe, values created with CryptStr or CryptIt can not be used!\n/Unicode\tPut in a character 0 after each character. Requires the entry to be REG_BINARY and does not support the /Decrypt option. Is used e.g. for the user name in registering Microsoft Office products.\n/NoBinConvert\tFor entries beginning with H#... if they should not be converted to binary strings.\n/NoErrors\tIgnore any error while setting/removing the registry entry.\n\n",
        "syntax": "REGISTER32 'mainkey' 'subkey' ['valname' 'value' 'type' [/Add] [/Remove]  [/Decrypt] [/Unicode] [/NoBinConvert] [/NoErrors]]"
    },
    "wallpaper": {
        "add": " Wallpaper '%_Windows%\\MyWallpaper.bmp'",
        "example": "Wallpaper '%_Windows%\\MyWallpaper.bmp'",
        "description": "Allows to set the users or systems wallpaper",
        "parameters": "Filename\tPath and filename of the wallpaper to be set.\n/User\tSets the wallpaper for the current user. If /User is not set the wallpaper is in the system environment.\n\tNote: Setting the wallpaper in the system environemtn requires a login/logout or a reboot before the new wallpaper becomes active.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n",
        "syntax": "WALLPAPER 'filename' [/User] [/NoFileSystemRedirection]"
    },
    "installed": {
        "add": " if INSTALLED 'MSIPRODUCT' '{F11B93A5-E726-4F9F-BC23-14327C89ADF6}' then goto MSIReinstall",
        "example": "if INSTALLED 'MSIPRODUCT' '{F11B93A5-E726-4F9F-BC23-14327C89ADF6}' then goto MSIReinstall",
        "description": "Process an action, based on the status of an installation.Currently only the type MSIPRODUCT is supported (which checks if a certain product has been installed by Windows installer or not).",
        "parameters": "Type\tWhat kind of component should be checked. Currently only \"MSIPRODUCT\" is valid.\nParameter\tAdditional specifications for the component. For the type MSIPRODUCT it is the Product-ID of the MSI-Package\n\n",
        "syntax": "IF [NOT] Installed 'Type' 'Parameter' THEN command"
    },
    "msi": {
        "add": " MSI '%_PkgSource%\\Server\\MSI\\orca.msi' 'ACTION=\"INSTALL\" ALLUSERS=1' /None",
        "example": "MSI '%_PkgSource%\\Server\\MSI\\ORCA.msi' 'ACTION=\"INSTALL\" PRIMARYFOLDER=\"%_PkgTarget%\\Orca\"' /NoneMSI '{8FC71000-88A0-4B41-82B8-8905D4AA904C}' 'oums' /RepairMSI '%_PkgSource%\\Server\\MSI\\Hummingbird Exceed.msi' 'ACTION=\"INSTALL\" ALLUSERS=\"1\" TRANSFORMS=\"%_PkgSource%\\Server\\MSI\\1033.MST\"' /LOG:\"%_Windows%\\MSIExceed.Log\" /AppendToLog /None",
        "description": "Installs or removes a specified package in Microsoft Installer Service format.",
        "parameters": "Packagepath\tName and location of the MSI package (use UNC notation if running from a networked source)\nOptions\tOption/Property string as specified in the MSI documentation.\n\t\tAttention: MSI is very restrictive on the use of Uppercase/Lowercase characters in Option fields. So make sure to use them correctly.\n/Repair\tPerforms the MSI-internal repair of an MSI installation. In this case Packagepath must not point to the MSI package but rather contain the Product-ID of the MSI package and Options must specify what kind of items should be reapired and how the file reinstallation should take place.\n\t\tRepair Option/Property string as specified in the MSI documentation.\n\t\tOne of the following reinstall-settings must be specified:\n\t\tp: Reinstall only if file is missing\n\t\to: Reinstall if file is missing or an older version is present\n\t\te: Reinstall if file is missing or an equal or older version is present\n\t\td: Reinstall if file is missing or a different version is present\n\t\tc: Reinstall if file is missing or corrupt\n\t\ta: Force all files to be reinstalled, regardless of checksum or version\n\n\t\tThis can be combined with the following options:\n\t\tu: Rewrite all required user registry entries\n\t\tm: Rewrite all required machine registry entries\n\t\ts: Rewrite all shortcuts\n\n/Default\tShow the default user interface of MSI as specified in the package\n/Full\tShow complete user interface of MSI (requires user interaction)\n/Reduced\tShow partial user interface of MSI without requiring user selections\n/None\tShow no user interface at all, leave user interface to Columbus\n/Basic\tShow only progress information of MSI\n/Log:\"LogFile\"\tWrite a protocol file of the Installer actions. By default this file will get overwritten\n/AppendToLog\tAppends installer logging to the \"Logfile\" file instead of overwriting it\n/LogTypes:\"...\"\tWhat kind of messages should be protocolled. By default \"V\" is assumed. Possible values (which can get combined):\n\t\tV: Verbose, all messages\n\t\tF: Fatal Exit\n\t\tE: Error\n\t\tW: Warning\n\t\tU: User\n\t\tI: Info\n\t\tR: Resolvesource \n\t\tO: Out of disk space\n\t\tS: Action start\n\t\tD: Action data\n\t\tC: Common data\n\t\tP: Property dump\n/DesktopInteractionRequired \tSome installation routines need an interaction with desktop of the currently user to execute properly. By default this is not possible when a program is called from the Server or Client part of the package, because this gets executed by the Columbus service in the background. When this switch is used the Columbus client starts a helper service, which can interact with the desktop, but still has administrative rights. The helper service executes the program and after the execution it gets removed by the Columbus Client again.\nRequirement: the file ColiSvc.exe must be present in the same folder as the Columbus.exe\n/DisableInput\tIf DesktopInteractionRequired is used, keyboard and mouse input from the logged on user can be disabled during installation, so that the user cannot interfere with the installation procedure.\n/NoFileSystemRedirection\n[TAB]\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "MSI 'packagepath' 'options' [/Repair] [[/Default] [/Full] [/Reduced][/None][/Basic]] [/LOG:\"Logfile\"] [/AppendToLog] [/LogTypes:\"...\"] [/DesktopInteractionRequired] [/DisableInput] [/NoFileSystemRedirection]"
    },
    "play": {
        "add": " PLAY 'wavfile'",
        "example": "PLAY 'c:\\funstuff\\sound\\start.wav'PLAY ''",
        "description": "Plays a WAV file asynchronously. This allows you to play a background tune while a script file is running.",
        "parameters": "Wavefile\t\tFull pathname of the WAV file to be played. The file is played asynchronously, and in an endless loop, until the executable ends, or the PLAY function is called with an empty string ('').\n/NoFileSystemRedirection\n[TAB]\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "PLAY 'wavefile' [/NoFileSystemRedirection]"
    },
    "rename": {
        "add": " RENAME 'source' 'target'",
        "example": "Rename the directory C:\\TEMP\\TEST to C:\\TESTNEW:Rename '%TEMP%\\test' '%SYSTEMDRIVE%\\testnew'Rename the file C:\\TEMP\\TEST\\MYFILE.TXT to C:\\TEMP\\TEST\\YOURFILE.TXT:Rename '%TEMP%\\test\\myfile.txt' '%TEMP%\\test\\yourfile.txt'",
        "description": "Renames directories and files to new names.Note: This command does not support moving files or file trees to a different drive, but can move a complete subtree within the same drive. It does not support the use of wildcards in the file or directory name.",
        "parameters": "Source\tName of the source file or directory\nTarget\tName of the target file or directory\n/NoErrors\tIf the operation fails and this switched is used Columbus will not raise and error and terminate the script.\n/Force\tIf the target file already exists, it will be deleted, even if the file is read only. Then the rename takes place. If the file cannot be deleted, e.g. because it is in use, the function terminates with an error.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "RENAME 'source' 'target' [/NoErrors] [/Force] [/NoFileSystemRedirection]"
    },
    "if": {
        "parameters": "Variable\tName of the variable enclosed by single quotes and % signs\nValue\tValue to be compared with the variable enclosed in single quotes. Can be empty if only existence of variable is checked.\nCommand\tAny valid Columbus command\n\n\n",
        "example": "If '%Temp%'='' Then Set Temp='C:\\Temp'If Not '%_OSTechnology%'='Win9x' then goto WINDOWS95If Not '%_ColumbusMajorVersion%'='5' then Exit 'Columbus 5 must be installed' if '%_ApplicationData%' contains 'Administrator' then Log 'You are the user \"Administrator\".' if '6.12.0' \u003c '6.2.0' then Log 'C6 was not able to compare file versions correctly - because it thinks that version 6.12 is less than version 6.2!' if '6.12.0' V\u003e '6.2.0' then Log 'C7 now offers the option for version based comparison, therefore it knows that 6.12 is higher than 6.2.' if '99' \u003e '100' then Log 'C6 was not able to compare numbers correctly - because it thinks that 99 is more than 100!' if '99' N\u003c '100' then Log 'C7 now offers the option for numeric comparison, therefore it knows that 99 is less than 100.'",
        "description": "{\\rtf1\\ansi\\deff0\\deflang1033{\\fonttbl{\\f0\\froman\\fprq2 MS Sans Serif;}{\\f1\\froman\\fprq2\\fcharset0 MS Sans Serif;}}{\\colortbl ;\\red0\\green0\\blue255;}{\\*\\generator Msftedit 5.41.15.1515;}\\viewkind4\\uc1\\pard\\tx12\\tx1288\\cf0\\f0\\fs16 Process an action, based on the value or existence of a variable. The action may be a conditional jump\\lang2055\\f1  \\lang1033\\f0 (GOTO) or any other Columbus command.\\par\\pard\\fi-1560\\li1562\\tx12\\tx1420\\par\\lang2055\\f1 Description of operators\\cf1\\lang1033\\f0\\par\\lang2055\\f1 \u003c\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 String comparison - checks if %Variable% is lower than %Value%\\lang1033\\f0\\par\\cf1\\lang2055\\f1 \u003e\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 String comparison - checks if %Variable% is higher than %Value%\\lang1033\\f0\\par\\cf1\\lang2055\\f1 =\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 String comparison - checks if %Variable% is equal to %Value%\\par\\cf1 Contains\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 String comparison - checks if %Variable% contains the value of %Value%\\lang1033\\f0\\par\\cf1\\lang2055\\f1 NoCaseContains\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 String comparison - checks if %Variable% contains the value of %Value% (case insensitive)\\par\\cf1 N\u003c\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 Numeric comparison - checks if %Variable% is lower than %Value%\\lang1033\\f0\\par\\cf1\\lang2055\\f1 V\u003c\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 File version based comparison - checks if %Variable% is lower than %Value%\\lang1033\\f0\\par\\cf1\\lang2055\\f1 N\u003e\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 Numeric comparison - checks if %Variable% is higher than %Value%\\lang1033\\f0\\par\\cf1\\lang2055\\f1 V\u003e\\lang1033\\f0\\tab\\cf0\\lang2055\\f1 File version based comparison - checks if %Variable% is higher than %Value%\\lang1033\\f0\\par\\pard\\fi-1560\\li1562\\tx12\\tx1288\\par\\par\\pard\\lang2055\\f1\\par} ",
        "syntax": "IF [NOT] '%Variable%' =|Contains|NoCaseContains|N 'value' THEN command\nIF [NOT] '%Variable%'='' THEN command",
        "rem Description": "Process an action, based on the value or existence of a variable. The action may be a conditional jump (GOTO) or any other Columbus command.",
        "add": " If Not '%_ColumbusMajorVersion%'='7' then Exit 'Columbus 7 must be installed'"
    },
    "font": {
        "add": " Font '%_Fonts%\\MyFontfile.ttf' /Add",
        "example": "Font '%_Fonts%\\Arial.ttf' /AddFont '%_Fonts%\\Arial.ttf' /Remove /NoErrors",
        "description": "Registers or unregisters a font resource. The command does not perform any copying of the font file itself. The benefit over simply writing the font registry entry is that this command informs other applications about the new font, thefore it does not require a reboot.",
        "parameters": "Fontfile\tFont file name including full path. The file must already exist.\n/Add\tRegisters the font.\n/Remove\tUnregisters the font\n/NoErrors\tScript will not terminate in case of errors, e.g. if the font file does not exist.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n\n",
        "syntax": "Font 'Fontfile' [/Add ï¿½ /Remove] [/NoErrors] [/NoFileSystemRedirection]"
    },
    "wmiread": {
        "add": " WMIREAD '' 'Win32_ComputerSystem' 'Model' '' 'ComputerModel' /Immediate /Machine",
        "example": "WMIREAD '' 'Win32_LogicalDisk' 'DeviceID' 'where Description=\"CD-ROM Disc\"' 'CDRomDriveLetter' /Immediate /MachineWMIREAD '' 'Win32_ComputerSystem' 'Model' '' 'Model' /Immediate /Machine",
        "description": "Allows to read any WMI inventory data and returns the value in a Columbus variable for use in scripts or forwarding it to the Columbus Console.WMI (Windows Management Instrumentation) is the standard access interface to Windows Inventory data including Hardware, Configuration or installed Software. WMI is available by default on Windows 2000/XP. In order to use it on Windows NT4, you need to download WMI components from Microsoft free of charge.Using \"WMIRead\" will allow you to bind installation decisions to inventory parameters (e.g. 'if memory is higher than n and network adapter is y then install). Also you may use \"WMIRead\" in combination with the \"WriteInventory\" command to forward the retrieved values to the Columbus consoles feedback file.",
        "parameters": "Machine\tName of the machine where the query should take place. In the moment only the current machine is supported, so this value has to be empty or a dot \".\".\nWMIClass\tName of the WMI class to be queried\nWMIproperty\tName of the property of the specified class that should be evaluated. Every class can have a lot of properties.\nWQLStatement\tWQL statement to make the selection more precise. WMI supports a subset of SQL for queries, if a class can have more values, for instance installed printers.\nVariableName\tThe name of the variable that the retrieved value should be assigned to\n/Immediate\tNeeded if a value gets read in the ServerAdd section and should be used in the same or other ServerAdd section(s). Causes the variable to be set immediately instead of beeing written to the machvars.wms, where it would be available in the ClientAdd section\n/Machine\tVariable set in the machine part. This is the default\n/User\tWhen the command is used in the UserAdd section and the user has no write access to the machine hive of the registry, this option must be used. Sets the variable in the user hive of the registry\n\n\n\n",
        "syntax": "WMIRead 'machine' 'wmiclass' 'wmiproperty' 'wqlstatement' 'VariableName' [/Immediate ï¿½ /Machine ï¿½ /User]"
    },
    "rd": {
        "add": " RD '%_Programs%\\Utilities'",
        "example": " RD '%_Programs%\\Utilities' /Empty RD 'c:\\temp\\subdir'",
        "description": "Remove a whole directory subtree, including any files within it. Read-only files get flagged Read/Write for deletion if possible.Note:A remove directory with length 0 or 1 (empty or '\\' only) will be ignored to protect machines from being destroyed, if for instance a referenced variable for the RD command does not exist or has length 0!",
        "parameters": "Directory\t\tDirectory to be removed\n/Empty\t\tRemoves the directory only if it is empty.\n/NoErrors\t\tThis switch causes delete functions to ignore errors caused by files which cannot be deleted.\n/NoRebootOperations\t\n\t\tIf a file is in use and can't be deleted Columbus would normally initiate a pending file rename operation and delete that file at next reboot. With this switch set, Columbus will skip such files without an error - but not initiate any file rename operations (and therefore not delete the affected file).\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n\n",
        "syntax": "RD 'directory' [/Empty] [/NoFileSystemRedirection] [/NoErrors] [/NoRebootOperations]"
    },
    "service": {
        "add": " SERVICE 'Name' 'File' 'DisplayName' 'Group' 'UserID' 'Password' /Install /Device /Autostart /NoErrors",
        "example": "Service 'CpqSnd' '%SystemRoot%\\system32\\drivers\\cpqsnd.drv' 'Compaq Soundsystem' 'Base' '' '' /Install /Systemstart /Device /NoErrorsService 'Mcontrol' /Remove /NoErrorsService 'ClipSrv' /Start",
        "description": "Installs or removes a Windows NT System Service. Special rights (System Administrator) are required to use this command. This command only registers the Service in the Service Control Manager's Database. In order to set the correct service parameters, some additional Register32 commands may be required.",
        "parameters": "Name\tName of the Service. This name is equivalent to the name of the service's subkey in the registry entry '\\SYSTEM\\CurrentControlSet \\Services'. \nFile\tName and  path of the file that contains the service.\nDisplayName\tTitle to be displayed in the Service Control Panel. This parameter can be empty.\nGroup\tName of the Load order group the service is part of. This parameter can be empty.\nUserID\tUserID to be used for the Service. If none is specified, then the service will run under an internal system account.\nPassword\tPassword of the ID to be used.\n/Install\tInstall a service. \nBy default, a standard NT service process is assumed. \n\t\tBy combining this switch with the /DEVICE or /FILESYSTEM switches, it can also install device drivers or file system drivers. \n\t\tThe optional, additional switch /VISIBLE will turn on the visual interaction of the service with the user's desktop. \nIn combination with the /Install switch, you can also define different start modes for a service, such as: /Bootstart, /Demandstart, /Systemstart, /Autostart, or /Disabledstart (to mark a disabled driver).\n/Remove\tRemove an existing service of any kind\n/NoErrors\tThis prameter should be always specified to avoid having the script stop if the service cannot be installed because it is already running. It also avoids an error if the uninstall fails because the service does not exist.\n/Start\tStarts the specified service. Note: Do not use the services Display name but the real name of the service (e.g. ClipSrv)\n/Stop\tStops the specified service. Services that the actual service depends on must get stopped before. Note: Do not use the services Display name but the real name of the service (e.g. ClipSrv)\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "SERVICE 'Name' 'File' 'DisplayName' 'Group' 'UserID' 'Password' /Install ï¿½ /Start ï¿½ /Stop [/Device ï¿½ /Filesystem] [/Bootstart ï¿½ /Systemstart ï¿½ /Autostart ï¿½ /Demandstart ï¿½ /Disabledstart ] [/Visible] [/NoErrors] [/NoFileSystemRedirection]"
    },
    "textfile": {
        "add": "Textfile \"%_WindowsSystem%\\myfile.txt\" \"EntryToAdd\" /Add",
        "example": "Textfile \"%_WindowsSystem%\\drivers\\etc\\services\" \"bootpc 68/udp dhcpc #Bootstrap Protocol Client\" /Add /IfNotexists:\"68/\"Textfile '%_Windows%\\Logfile.log' 'Last Startup: %_Indextime%' /Add",
        "description": "Textfile can modify textfiles that are not in an INI file based format. The textfile should be line based. This command allows you to add, change or delete lines in files like Serives, Hosts and similar files.Main functions are:Textfile 'Filename' 'Textline' /Add (adds a line if it does not exist yet)Textfile 'Filename' 'Search' 'Replace' /Replace (Search / Replace)Textfile 'Filename' 'Search' 'Textline' /ReplaceLine (Replace entire line while searching only for a part of a line)Textfile 'Filename' 'Text' '/Delete (Delete line containing the specified text)Textfile 'Filename' 'Textline' /DeleteLine (Delete a line, requires the entire line to be specified)",
        "parameters": "Filename\tSpecifies the file that should get modified\nTextline\tSpecifies an entire line (not case sensitive)\n/Add\tSpecifies that a line should get added\n/IfExists:\"...\"\tSpecifies that a line should get added only if a specific text entry already exists\n/IfNotExists:\"...\"\tSpecifies that a line should get added only if a specific text entry does not exist yet\n/AtTop\tThe entry should get added at the beginning of the file\n/AtEnd\tThe entry should get added at the end of the file\n/BeforeEntry:\"...\"\tThe entry should get added just before the first occurrence of the text specified\n/AfterEntry:\"...\"\tThe entry should get just after the first occurrence of the text specified\nSearch\tThe text that should be searched for\nReplace\tThe text that should be replace the text that got searched\n/Replace\tSpecifies that a Search/Replace should be performed\n/First\tSpecifies that Replace or Delete functions terminate after the have been been executed once (to avoid multiple Replace or Delete)\n/ReplaceLine\tSpecifies that a Search/Replace of an entire line should be performed\n/AddifMissing\tThe text the should get replaced will get added if the search text could not get found\n/Delete\tSpecifies that a Delete should be performed\n/DeleteLine\tSpecifies that a DeleteLine should be performed\n/AllowDuplicates\tAllows that the line that should be added can appear more than once (e.g. for writing TNSNAMES.ORA or SQLNET.ORA)\n/NoErrors\tIf during the textfile manipulation an error occurrs the error will be ignored and the execution of the script will be continued.\n/OmitTrailingCRLF\tIf this switch is specified the file will be written without a carriage return / line feed for the last line. if you have severla textfile commands for the same file this switch is only required for the last textfile command.\n/CreateAnsi\tCreates the file in ANSI format (if the file is not existing yet), this is the default.\n/CreateUnicode\tCreates the file in UNICODE format (if the file is not existing yet)\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "Textfile 'Filename' 'Textline' /Add [/IfExists:\"TexttoFind\" ï¿½ /IfNotexists:\"TexttoFind\"] [/AtTop ï¿½ /AtEnd ï¿½ /BeforeEntry:\"Entry\" ï¿½ /AfterEntry:\"Entry\"] [/AllowDuplicates] [/OmitTrailingCRLF] [/NoErrors] [/NoFileSystemRedirection]"
    },
    "regread64": {
        "add": " REGREAD64 'mainkey' 'subkey' 'valname' 'variable name' /Immediate",
        "description": "Allows to retrieve the value of a 'REG_SZ' style registry value (REG_SZ, REG_EXPAND_SZ or REG_DWORD) into a Columbus variable.Note:  Microsoft automatically redirects certain registry keys for 32bit applications. Since Columbus is a 32Bit application using the RegRead command would might read from redirected keys. So for reading registry keys used by 64Bit applications use the RegRead64 command.",
        "parameters": "mainkey\t\tOne of the valid registry hives:\nHKey_Classes_Root\nHKey_Current_User\nHKey_Users\nHKey_Local_Machine\nHKey_Current_Config\n\nSubkey\t\tSubkey inside the hive to be built or to be opened for adding a value\n\t (i.e., Software\\Microsoft\\Notepad).  Note: Subkeys have no leading backslash.\nvalname\t\tName of a value inside the specified tree. The value should beither of type REG_SZ, REG_DWORD or REG_EXPAND_SZ.\n\t\tIf you are not sure of the type, use REGEDT32 in NT to check or REGEDIT in Win9x.\nVariable Name\t\tName of the variable where the result shall be stored without %..% signs.\n/Script\t\tVariable is only valid for the actual script\n/User\t\tVariable is set for every user in the user space\n/Machine\t\tVariable is set in the machine space. This is the default, when no parameter is specified.\n/Immediate\tAllows to make the variables immediately active (required when using within Server part of scripts).\n",
        "syntax": "REGREAD64 'mainkey' 'subkey' 'valname' 'variable name' [/Script ï¿½ /User ï¿½ /Machine] /Immediate [/Volatile]",
        "example": "Reading the default dierctory where to install (64Bit) programs to:REGREAD64 'HKEY_LOCAL_MACHINE' 'Software\\Microsoft\\Windows\\CurrentVersion' 'ProgramFilesDir' 'AppDir' /Immediate"
    },
    "exit": {
        "add": " EXIT 'reason for exit'",
        "example": "Exit 'sorry, but execution had to be stopped'If not File 'c:\\test.txt' then exit 'Could not find the file \"c:\\test.txt\"'",
        "description": "Under certain circumstances it may be necessary to stop the installation of a package based on logical decisions such as a check for a certain package to be installed before this one. The exit command offers such a function, and can provide an error message which will be reported in the package queue. The package itself remains in the queue and will be re-executed during the next Columbus run.",
        "parameters": "Message\t\ttext to be reported as the reason for stopping processing of the package",
        "syntax": "EXIT 'message'"
    },
    "copy": {
        "add": " COPY 'C:\\*.*' TO 'C:\\*.*' /Sub /Newer",
        "example": "COPY 'c:\\*.bat' TO 'c:\\temp\\'COPY 'c:\\*.bat' TO 'c:\\temp\\' /-r /ChangedCOPY 'c:\\*.bat' TO 'c:\\temp\\' /-oCOPY 'c:\\*.bat' TO 'c:\\temp\\' /Sub /move /NoErrors",
        "description": "Copies or moves files from 'FromFile' to 'ToPath'. Time, date, size, and the attributes of the file will not be changed, except that the /xR switch is used. Wildcards can be used in the FromFile.",
        "parameters": "FromFile\tSource path and file. Filename may contain wildcards ('?' '*').\nToPath\tTarget path ending with a '\\' or filename of the form '*.*','*.xxx'...\n/S\tThis parameter is not supported.\n/+R\tSet ReadOnly attributes at target.\n/-R\tRemove ReadOnly attributes on target.\n/+O\tCauses overwriting of the target files. A read-only target will be flagged read-write, if possible; if not, the file will not be copied.\n/-O\tOnly files that do not exist on the target will be copied. If no /xO is specified, any target file that is not read-only gets overwritten.\n/Sub\tCopies the specified files in a whole subtree\n/Newer\tIf a target file with the same name exists, then only newer files (date/time) are copied. This command can be combined with /Sub, but not with /Changed. Files existing only on the source drive will be copied. This command can be used to synchronize environments such as laptop and desktop data.\n/Changed\tIf a target file exists with different date/time (newer or older!), then the source file is copied. This command can be combined with /Sub, but not with /Newer. Files existing only on the source drive will be copied. This command can be used to force environments to be in a certain condition (e.g., release server \u003c---\u003e production environment).\n/Version\tColumbus will overwrite a file depending on version numbers instead of using file dates. This switch can get combined with /Newer or /Changed\n/MOVE\tAttempts to move the files instead of a simple copy. If the source is read-only, it will try to flag it ReadWrite and delete it. If deletion is not possible, it will be ignored without an error.\n/NoErrors\tThis switch causes copy functions to ignore errors caused by target files which cannot be overwritten. Errors caused by insufficient rights or disk space will still be reported.\n/NOREBOOT\n  OPERATIONS\tIf a file is in use and can't be overwritten Columbus would normally initiate a pending file rename operation and update that file at next reboot. With this switch set, Columbus will skip such files without an error - but not initiate any file rename operations (and therefore not update the affected file).\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n\n\n",
        "syntax": "COPY 'FromFile' TO 'ToPath' [/S][/{+-}R][/{+-}O][/Sub] [/Newer] [/Changed] [/Version] [/MOVE] [/NoErrors] [/NoRebootOperations] [[/NoFileSystemRedirection]"
    },
    "regperm64": {
        "add": " Regperm64 'HKEY_LOCAL_MACHINE' 'Software\\MyApp' '%_GroupUsers%' 'M' 'Container' /Add /SubREGPERM64 \"HKEY_LOCAL_MACHINE\" \"Software\\test\" \"Users\" \"W\" \"Container\" /Sub",
        "example": "Regperm64 \"HKEY_LOCAL_MACHINE\" \"Software\\test\" \"Administrators,MyDomain\\_Columbus\" \"F\" \"Container\" /ReplaceAll /SubRegperm64 \"HKEY_LOCAL_MACHINE\" \"Software\\test\" \"Users\" \"W\" \"Container\" /SubRegperm64 'HKEY_LOCAL_MACHINE' 'Software\\MyApp' '%_GroupUsers%' 'M' 'Container' /Add /Sub",
        "description": "Set permissions on registry keys.Not supported on Win9x.",
        "parameters": "Hive\tHKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER or HKEY_CLASSES_ROOT\nTree\tSubkey inside the hive\nGroup/User\tUser name or group name\nRights\tF (Full), M (Write and Delete), W (Write), R (Read) or N (None), or any combination of the following words: QUERYVALUE, SETVALUE, CREATESUBKEY, ENUMSUBKEY, NOTIFY, CREATELINK, DELETE, WRITEDAC, WRITEOWNER, READCONTROL, FULLCONTROL\nFlags\tempty or CONTAINER\n/Sub\tSets security on key and existing subkeys\n/Replace\tReplaces the ACL instead of modifying it for the specified users/goups. The default security settings will be removed and only the specifyed security settings will be applied. Rights of other users/groups will not be affected, like the built in accounts System or Administrator\n/ReplaceAll\tReplaces the ACL instead of modifying it for all users/goups. So only the specified users/groups will have the specified rights and all others including built in system accounts will be removed. Be carefully using this powerful option. Consider to include the default system rights and accounts.\n/Add\tModifies the ACL, so these settings will be added to the existing security settings (this is the default when nothing is specified).\n/Remove\tRemoves the specified rights\n/NoErrors\tScript execution will continue, even when a critical errors occurs\n/Allowed\tThe specified rights will be granted to the user/groups. This is the default when nothing is specificed\n/Denied\tThe specified rights are explicetely denied to the specified users/groups. According to Windows security rules the tightest security setting wins. So a user will not get this right, even if he is also member of a group, which would give him those rights.\n\n\n\n\n\n\n",
        "syntax": "REGPERM64 'HIVE' 'Tree' 'Group/User' 'Rights' 'Flags' [/Sub] [(/Replace /Add /ReplaceAll /Remove), Default is /Add] [/NoErrors] [(/Allowed /Denied), Default is /Allowed]"
    },
    "script": {
        "add": " Begin Script 'PowerShell'  return [guid]::NewGUID().ToString() End Script Log 'New GUID = %_ReturnValueScript%'",
        "example": "Begin Script 'PowerShell64'  Install-WindowsFeature -Name Web-ServerEnd ScriptBegin Script 'PowerShell'  Return [guid]::NewGUID().ToString()End ScriptLog 'New GUID = %_ReturnValueScript%';Unnamed parametersSet TFileTypes='*.dll' /VolatileBegin Script 'PowerShell' '' '%_Windows%' '%TFileTypes%'  Get-Childitem $Parameter1 $Parameter2 -force -erroraction 'SilentlyContinue' | Out-StringEnd ScriptLog 'Files found: %_ReturnValueScript%';Named parametersSet TFileTypes='*.dll' /VolatileBegin Script 'PowerShell' '' 'ListDir=%_Windows%' 'ListTypes=%TFileTypes%'  Get-Childitem $ListDir $ListTypes -force -erroraction 'SilentlyContinue' | Out-StringEnd ScriptLog 'Files found: %_ReturnValueScript%';Terminate Process(es) Begin Script 'PowerShell' '' 'TaskToTerminate=iexplore'   Get-Process | Where-Object {$_.Name -eq \"$TaskToTerminate\"} | Stop-Process End Script BEGIN SCRIPT 'VBScript' 'Main' 'parameter1' 'parameter2'Sub Main (x,y)    MsgBox \"my parameters are: \" \u0026 x \u0026 \" and \" \u0026 yEnd SubEND SCRIPT",
        "description": "Allows you to integrate scripts desgined for WSH (Windows scripting host) or Powershell within Columbus scripts.",
        "parameters": "ScriptType\tAny valid WSH source. E.g. VBScript - or Powershell\nProcedure\tThe procedure within the Script that should be launched. Not applicable for Powershell.\nParamx\tParameter(s) that should be passed to the main procedure/Powershell\n\n",
        "syntax": "Begin Script 'ScriptType' 'Procedure' [Param1] [Param2] ...[TAB]...script commands...End Script"
    },
    "error": {
        "add": " ERROR ON",
        "example": "On Error goto ErrorhandlerError Off",
        "description": "Handle errors from script commands.Error Off will suppress errors from script commandsError On will cause the current script to be stopped if a command causes an errorOn Error allows you to specify any script command to be executed if an error occurs (also Goto [label])Note: These commands affect only the behaviour of Columbus with a section of a script. As soon as another section or another script is loaded Columbus will default to ERROR ON.Use the OFF switch with caution, because otherwise a package may not be installed correctly but it will be protocolled as sucessfully installed!",
        "parameters": "ON\tWhen an error occures Columbus will terminate the execution of the script. The package will stay in the processing queue, with a detailed error message and feedback will be send to the Columbus Control Center that the package has terminated with an error including an errormessage. This is the recommended setting and the default, if nothing is specified. This is also the same behaviour like Columbus versions older then 5.1.\n\nOFF\tdoes not terminate the execution of a script in case of any error,\n\n",
        "syntax": "[Error On ï¿½ Error Off ï¿½ On Error]"
    },
    "runas": {
        "add": " RunAs 'MyDomain' 'Columbus' 'H#' '%_PkgTarget%\\Config.exe' '' '' Show Waitdown Task",
        "example": "Run with Localuser Credentials:RunAs '' 'LocalUser' 'H#692635EF5ADF201EC8' '%_PkgTarget%\\Config.exe' '' '' Show Waitdown Task Run with Domainuser Credentials:RunAs 'MyDomain' 'DomainUser' 'H#692635EF5ADF201EC8' '%_PkgTarget%\\Config.exe' '' '' Show waitdown task",
        "description": "Runs an application in the user part of the package with the privileges of the specified account instead of the logged on user. This makes it possible to execute programs, which either needs interaction with the user or must display something on the users desktop or must access any drive or settings of the logged on user with administrative rights. This command is similar to the RUNAS.EXE in Windows2000 and XP.The value for \"Application\" is handled more restictive than for standard run, e.g. just specifying \"notepad\" will not work, you should include the path and the extension, e.g. \"%_Windows%\\notepad.exe\".The password must be encrypted with PubliCrypt.Note: The command only works in the user parts of a package!",
        "parameters": "Domain\tName of the domain if the specified account is a member of a domain. Leave blank for local accounts.\nUser\tUsername of the account. The application will be executed under the name and with the privileges of this account.\nPassword\tThe password of the account must be encrypted with the PubliCrypt utility found in your Columbus download.\nApplication\tPath and filename of the application, which should get executed. The full path to the executable and the full filename including extension must be specified.\nParams\tOptionally specify parameters for the application here\nStartDir\tOptionally specify the startup folder for the application\nShowMode\tWindow mode of the application window upon startup. Values can be either Show, Hide, Minimize or Maximize\nWaitdown Task[:xx]\tIf this parameter is specified Columbus waits with the further execution of the script until this is task finished. This makes it possible to synchronize the script with the external application. Optionally a maximum wait time in seconds can be specified.  Columbus continues with the execution after the specified seconds, regardless if the task is still running. This helps to avoid deadlock situations, in case a task crashes.\n/NoErrors\tDoes not stop the script with an error in case the appliaction file does not exist or cannot be started\n/LoadUserProfile\tOptionally loads a userprofile for the specified account. This may be necessary for certain applications, especially MSI setup routines.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "RunAs 'Domain' 'User' 'Password' 'Application' 'Params' 'StartDir' Show ï¿½ Hide ï¿½ Minimize ï¿½ Maximize [Waitdown Task[:XX]] [/NoErrors] [/LoadUserProfile] [/NoFileSystemRedirection]"
    },
    "md": {
        "add": " MD 'directory'",
        "example": "MD 'c:\\winword'MD '%AD%:%ADIR%\\WINWORD'MD '\\\\%machinename%\\%sharename%\\user\\data\\sub1\\sub2'",
        "description": "Create a directory called 'directory'. This command can create several subdirectory levels in one step.",
        "parameters": "Directory\tDrive and path of the directory to be created\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "MD 'directory' [/NoFileSystemRedirection]"
    },
    "addnet": {
        "add": " ADDNET '\\\\server\\share' 'domain\\user' 'password' 'H:' /DoNotRemap",
        "example": "ADDNET 'SYS2:APPS\\TOOLS' '' 'T:'ADDNET 'SERVER1/LASERJET4' '' 'LPT1:'",
        "description": "Connects a local device (drive or port) to the network.Note: Local devices can be drives (A: to Z:) and ports (LPT1: to LPT4 or COM1 to COM4).",
        "parameters": "Networkpath\tNetwork path or printer queue\nUser\tThe user name of the account to connect to the resource (either specify only the user name or combine it as domain\\user)\nPassword\tPassword of the device\nDevice\tName of the device to be remapped\nMapFullPath\tMap the entire path (e,g, using directory names below the share) to the device name (e.g. when using \u003c\\\\MyServer\\MyShare\\SubDirectory\u003e as the NetworkPath).\nBased on the above example when speciyfing /MapFullPath the drive mapping will point to then SubDirectory directory, when omitting /MapFullPath then the drive mapping will point to the directory MyShare.\nDoNotRermap\tDoes not remap a drive letter that is already assigned \n\n\n",
        "syntax": "ADDNET 'networkpath' ['user'] 'password' 'device' [/MapFullPath] [/DoNotRemap] "
    },
    "clientconfig": {
        "add": " ClientConfig 'Base'",
        "example": "ClientConfig 'Base'",
        "description": "This command is used for Dynamic Config feature of Columbus.Writing a large number of different client settings and locations directly to the registry with scripts quickly becomes unmanageable. So an additional option has been created to load these settings from configuration templates. These templates are the familiar columbus.cfg files, as used in the OSDeploy Job for Columbus and in the Client Rollout feature and can be loaded via this command.",
        "parameters": "Template\tThe name of the configuration template. The templates are stored in a subdirectory of the directory containing the configuration script. Template is the name of the folder containing the Columbus.cfg file to load.\n\n\t[Columbus Cache directory]\\$CfgTemplate$\\ [TemplateName]\\ Columbus.cfg\n\n\tClientConfig '' (with empty parameter) in the configuration script, thus without Template name, instructs the Columbus client to process the Client Config Template assigned in the console.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n\n\n",
        "syntax": "ClientConfig 'template' [[/NoFileSystemRedirection]"
    },
    "register64": {
        "example": "Writing a string value:Register64 'HKey_Current_User' 'Software\\Microsoft\\International' 'sLanguage' 'DES' 'REG_SZ'Writing a binary value:Register64 'HKey_Current_User' 'Software\\BrainWare\\Test' 'BinaryValue' 'H#4523A0' 'REG_BINARY'Creating a Key without specifying a value:Register64 'HKey_Current_User' 'Software\\BrainWare\\New Key'Appending to a Stringlist:Register64 'HKey_Current_User' 'Software\\Test' 'multi' 'test' 'REG_MULTI_SZ' /AddRemoving from a StringlistRegister64 'HKey_Local_Machine' 'System\\CurrentControlSet\\Services\\Eventlog\\Application' 'Sources' 'Java VM' 'REG_MULTI_SZ' /Remove",
        "description": "Registers keys and values in any of the registry hives. Useful if you need to write a number of entries to the registry (as is often the case when installing an application).Note: The registry is the heart of the 32-bit systems (Windows NT and 95). Corrupting it by faulty values or incomplete settings may force a full reinstallation of Windows. Under NT, the registry is also protected by security profiles. So if you find that some REGISTER64 commands are not being performed, then this may be due to insufficient authorization of the user account running the script.The difference to the Register32 command is that Microsoft automatically redirects certain registry keys for 32bit applications. Since Columbus is a 32Bit application using the Register32 might write to redirected keys, therefore these entries would not be visible to 64Bit applications. For such cases the Register64 command should be used.Note: Some keys might be used from 32Bit AND 64Bit applications, then you should use the Register32 AND the Register64 command.",
        "add": " REGISTER64 'HKEY_LOCAL_MACHINE' 'Software\\....' 'valname' 'value' 'REG_SZ'",
        "syntax": "REGISTER64 'mainkey' 'subkey' ['valname' 'value' 'type' [/Add] [/Remove] [/Decrypt] [/Unicode] [/NoBinConvert] [/NoErrors]]",
        "parameters": "mainkey\tOne of the valid registry hives: HKey_Classes_Root HKey_Current_User HKey_Users HKey_Local_Machine HKey_Current_Config\t\nSubkey\tSubkey inside the hive to be built or to be opened for adding a value  (i.e., Software\\Microsoft\\Notepad).  Note: Subkeys have no leading backslash.\t\nvalname\tName of a value inside the specified tree. If no value and following parameters are specified, then only the key is created. Each key may have one value without a name. That one value can be created by specifying '' as the 'valname' parameter.\t\nvalue\tSpecifies the contents of a certain value (as defined by valname). Columbus currently supports values up to 999 bytes.\t\ntype\tThis specifies the type of data to be stored in a value. Allowed types are:\t\n\tREG_SZ\tStandard String\t\n\tREG_EXPAND_SZ\tString which contains Environment variables to be expanded\t\n\tREG_MULTI_SZ\tList of Strings (see also the additional /Add switch to handle such entries modular)\t\n\tREG_BINARY\tBinary data such as executables\t\n\tREG_NONE\tNo defined value type\t\n\tREG_DWORD\tDoubleWord (LongInteger)\t\n\tREG_DWORD_BIG_ENDIAN\t32-Bit Number (most significant byte per word is the low order byte)\t\n\tREG_DWORD_ LITTLE_ENDIAN\t32-Bit Number (most significant byte per word is the high order byte)\t\n\tREG_LINK\tUnicode symbolic link\t\n\tREG_RESOURCE_ LIST\tDevice driver resource list\t\n\tREG_QWORD\t64Bit number\n/Add\tWith REG_MULTI_SZ only\tAllows to append an entry to a REG_MULTI_SZ string without destroying its current contents or appending it in multiple copies\n/Remove\tWith REG_MULTI_SZ only\tAllows to delete an entry from a REG_MULTI_SZ string\n/Decrypt\tAllows to write a value into the registry that appears in encrypted form within a script (or external text file that its getting read from). Note that such entries must get created with PublicCrypt.Exe, values created with CryptStr or CryptIt can not be used!\n/Unicode\tPut in a character 0 after each character. Requires the entry to be REG_BINARY and does not support the /Decrypt option. Is used e.g. for the user name in registering Microsoft Office products.\n/NoBinConvert\tFor entries beginning with H#... if they should not be converted to binary strings.\n/NoErrors\tIgnore any error while setting/removing the registry entry.\n\n"
    },
    "shortcut": {
        "add": " SHORTCUT '%_Programs%\\NameofShortcut.lnk' 'FileToLaunch[,Parameters]' 'StartDir' 'Icon' 'Hint'",
        "example": "Shortcut on User Desktop:ShortCut '%_Desktop%\\Protocol.lnk' '%Data%\\protocol.doc' '%_PkgTarget%\\Startdir' '%_Windows%\\Notepad.exe,0'Shortcut in User Startmenu:ShortCut '%_StartMenu%\\Protocol.lnk' '%Pgm%\\winword.exe, %Data%\\test.doc' '%_SystemDrive%Data' '%_Windows%\\Notepad.exe'The second example calls WinWord with a parameter of '%Data%\\test.doc'.Remove a shortcut:ShortCut '%_Desktop%\\Protocol.lnk' /Delete",
        "description": "Creates or deletes a shortcut in the designated directory. The shortcut can point to executables as well as documents or other objects.",
        "parameters": "LinkFile\t\tPath and name of the link file to be created. If the file is generated in the user's menu structure, or the desktop area, then its filename (without the path) will be used as the display title\n\tPay attention, when creating a shortcut to a DOS-program, NT will create a file with the extension \".pif\" instead of \".lnk\".\nFileToLaunch\tPath and name of the file object you want to associate with this shortcut. This may be an executable or any document type for which an association has been defined. If you need to call an executable with one or more parameters, they need to be separated from the executable by a ',' (comma) - see the example.\nStartDir\tStart path where the application is launched.\nIcon\tLocation and Index of the Icon for the Shortcut. The notation is 'Filepath,Index' where Filepath is the path of the file containing the icon, and Index is an integer index of the icon in this file (first is 0). If no index is specified, then the first icon in the file is assumed\nDescription\tIcon description, which appears under Windows 2000 or Millenium, when you drag the mouse over the icon\n/Delete\tSpecifies that the shortcut (LinkFile) should get deleted (available from Columbus 6.10 upwards).\n/NoErrors\tThis switch causes Columbus to ignore any errors that might be raised while creating the shortcut.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n/Show\tDefault when nothing is specified. Opens the application window with the application default\n/Maximize\tMaximizes the application window upon startup.\n/Minimize\tMinimizes the application window upon startup.\n/Hide\tHides the application window upon startup.\n/Delete\tRemoves the shortcut specified by LinkFile.\n/RunAsAdmin\tSpecifies that the target application will be launched under different user account. Depending on the operating system and the user rights this can act in different ways:\nFor Operating systems earlier than Windows Vista this will indicate that the taregt application will be launched under a different user account.\nFor Windows Vista and higher it will ask a normal user for the new account detail (like e.g. on WIndows XP), for and administrator it will start the target aplpication automatically with administrator rights.\n\n\n\n",
        "syntax": "SHORTCUT 'LinkFile' 'FileToLaunch[,Parameters]' ['StartDir' ['Icon' ['Description']]] []] [/Maximize| /Minimize | /Show| /Hide] ï¿½ SHORTCUT 'LinkFile' /Delete [/NoErrors] [/NoFileSystemRedirection] [/RunAsAdmin]"
    },
    "inventory": {
        "add": " Inventory 'Components.System.Computer Model' '%MyValue%'",
        "example": "WMIRead '' 'Win32_ComputerSystem' 'Model' '' '_TEMP_' /Immediate /MachineInventory 'Components.System.Computer Model' '%_TEMP_%'Inventory 'Components.UserFullname' '%_UserFullName%' /User",
        "description": "Adds data to the Columbus Inventory",
        "parameters": "TreeItem\t\tThe Columbus inventory can be hierarchically structured.  A datatree contains a tree root, the main tree item, which is topmost level and any number of sub tree items. The items must be divided by dots \".\"\nDataItem\t\tThe data item is the display name for the reported item\nValue\t\tValue to be written\n/User \t\tWhen command is used in the UserAdd Section, the inventory data will stored in users inventory tab on columbus console.\n\n",
        "syntax": "Inventory '[MainTreeItem.[SubTreeItem1..n.]]DataItem' 'value' [/User]"
    },
    "cancelnet": {
        "add": " CANCELNET 'device'",
        "example": "CANCELNET 'T:'",
        "description": "Disconnects a assigned network device.Note: Local devices can be drives (A: to Z:) and ports (LPT1: to LPT4 or COM1 to COM4). The connection to this device is cut 'forced' which means, that in case an application is still using/writing data on it, this data may be lost.",
        "parameters": "Device\t\tName of the device the connection should be cut for",
        "syntax": "CANCELNET 'device'"
    },
    "shareddllcounter64": {
        "add": " SharedDLLCounter64 '%_WindowsSystem64%\\MyDLL.dll' /Inc:1",
        "example": "Upcount a SharedDLLCounter (+1):SharedDLLCounter '%_WindowsSystem%\\qchain.exe' /Inc:1Decount a SharedDLLCounter (-2):SharedDLLCounter '%_WindowsSystem%\\qchain.exe' /Dec:2",
        "description": "Creates / updates the registry entry counting the usage of shared components (for 64Bit components on 64Bit operating systems).",
        "parameters": "FileName\tThe file name of the shared component that should be treated.\n/Inc\tIncreases the usage counter by 1.\n/Dec\tDecreases the usage counter by 1.\n/Inc:xx\tIncreases the usage counter by xx.\n/Dec:xx\tDecreases the usage counter by xx.\n/NoErrors\t\tThis switch causes Columbus to ignore any errors during setting the Shared Dll counter.",
        "syntax": "SharedDLLCounter64 FileName /Inc /Dec /Inc:xx /Dec:xx [/NoErrors]"
    },
    "writeinventory": {
        "example": "WriteInventory 'SYSTEM' 'NETWORK' 'Primary IP Address' '127.0.0.1' '16'WriteInventory 'SYSTEM' /Delete",
        ";Syntax": "ClearInventory 'Mainindex' 'Subindex' [/User ï¿½ /Machine]",
        "Comment2": ";Syntax=ClearInventory 'Mainindex' 'Subindex' [/User ï¿½ /Machine]",
        "Comment5": ";Example=Delete the Subvalue '00001' in the mainindex '25001':ClearInventory '25001' '00001'Delete all Subvalues in the mainindex '25001'ClearInventory '25001'Delete all contents of the Columbus inventory:ClearInventory",
        ";Example": "Delete the Subvalue '00001' in the mainindex '25001':ClearInventory '25001' '00001'Delete all Subvalues in the mainindex '25001'ClearInventory '25001'Delete all contents of the Columbus inventory:ClearInventory",
        "syntax": "WriteInventory 'Dataclass' 'DataItem' 'Title' 'Value' 'Unit' [/User ï¿½ /Machine] [/Append] [/Delete]",
        "parameters": "Dataclass\tNumber of dataclass (e.g. '00009') or a constant ('SOFTWARE', 'PKGCOMPLETE', 'PKGWAITING', 'PKGERROR', 'SYSTEM', 'AUTOSETUP', 'ORGANISATION', 'HELPDESK' or 'GENERAL'\nDataItem\tNumber of dataitem (e.g. '00002') or a constant ('BOARD', 'BIOS', 'PROCESSOR', 'RAM', 'OS', 'NETWORK', 'DISPLAY', 'POINTING', 'PRINTER', 'DRIVE', 'PORTS', 'MSLOG', 'COLUMBUS', 'GENERIC')\nTitle\tDescriptive text for the entry\nValue\tThe value for item represented by title\nUnit\tThe unit representing the measurement ('1'=bytes, '2'=kilobytes, '3'=megabytes, '4'=gigabytes, '5'=points, '6'=pixels, '7'=inch, '8'=centimeter, '9'=milliseconds, '10'=seconds, '11'=minutes, '12'=hours, '13'=days, '14'=time, '15'=%, '16'=string)\n/User\tEntry will be removed from the Users inventory data\n/Machine\tEntry will be removed from the Machines inventory data. This is the default.\n/Append\tAppends entries to inventory\n/Delete\tRemoves the feedback entry/entries\n\n\n\n",
        ";Parameters": "{\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang1033{\\fonttbl{\\f0\\fswiss\\fprq2\\fcharset0 MS Sans Serif;}{\\f1\\fswiss\\fprq2 MS Sans Serif;}}{\\colortbl ;\\red0\\green0\\blue255;\\red0\\green0\\blue0;}\\viewkind4\\uc1\\pard\\fi-1420\\li1420\\tx1420\\cf1\\lang2055\\f0\\fs16 Mainindex\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Mainindex number\\par \\cf1 Subindex\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Subindex number\\par \\cf1 /User\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Entry will be removed from the Users inventory data\\par \\cf1 /Machine\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Entry will be removed from the Machines inventory data. This is the default.\\lang1033\\f1 \\par \\par \\par \\par } ",
        "Comment6": ";ADD= ClearInventory '25001' '00001'",
        "Comment4": ";Parameters={\\rtf1\\ansi\\ansicpg1252\\deff0\\deflang1033{\\fonttbl{\\f0\\fswiss\\fprq2\\fcharset0 MS Sans Serif;}{\\f1\\fswiss\\fprq2 MS Sans Serif;}}{\\colortbl ;\\red0\\green0\\blue255;\\red0\\green0\\blue0;}\\viewkind4\\uc1\\pard\\fi-1420\\li1420\\tx1420\\cf1\\lang2055\\f0\\fs16 Mainindex\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Mainindex number\\par \\cf1 Subindex\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Subindex number\\par \\cf1 /User\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Entry will be removed from the Users inventory data\\par \\cf1 /Machine\\cf2\\lang1033\\f1\\tab\\lang2055\\f0 Entry will be removed from the Machines inventory data. This is the default.\\lang1033\\f1 \\par \\par \\par \\par } ",
        "add": " WriteInventory 'SYSTEM' 'NETWORK' 'Primary IP Address' '' '127.0.0.1' 'STRING'",
        ";ADD": " ClearInventory '25001' '00001'",
        "description": "Allows to add additional feedback data that gets reported in the Management Console.",
        ";Description": "Allows to delete Columbus inventory data.",
        "Comment1": ";[ClearInventory]",
        "Comment3": ";Description=Allows to delete Columbus inventory data."
    },
    "expand": {
        "add": " Expand '%_PkgSource%\\Server\\Server.Zip' to '%_PkgTarget%\\' /Newer",
        "example": "Expand '%_PkgCache%\\Client\\windows.zip' TO '%_Windows%' /NewerExpand '%_PkgSource%\\Server\\apps.zip' TO '%_PkgTarget%' /Changed Expand '%_PkgSource%\\Server\\Server.Zip' to '%_PkgTarget%\\' '*.wms' /Newer",
        "description": "Copies files from 'FromFile' to 'ToPath'. Time, date, size, and the attributes of the file will not be changed, except that the /xR switch is used. Wildcards can be used in the FromFile. Support for wildcards (patterns) is available since version 7.0.5. If Patterns is omitted then *.* will be assumed.",
        "parameters": "FromZip\tDefines the Source file in ZIP format\nToPath\tTarget path ending with a '\\' or filename of the form '*.*','*.xxx'...\nPattern\tWildcards of files to expand. If this parameter is not specified then '*.*' is assumed.\n/+R\tSet ReadOnly attributes at target.\n/-R\tRemove ReadOnly attributes on target.\n/+O\tCauses overwriting of the target files. A read-only target will be flagged read-write, if possible; if not, the file will not be copied.\n/-O\tOnly files that do not exist on the target will be copied. If no /xO is specified, any target file that is not read-only gets overwritten.\n/Newer\tIf a target file with the same name exists, then only newer files (date/time) are copied. This command can be combined with /Sub, but not with /Changed. Files existing only on the source drive will be copied. This command can be used to synchronize environments such as laptop and desktop data.\n/Changed\tIf a target file exists with different date/time (newer or older!), then the source file is copied. This command can be combined with /Sub, but not with /Newer. Files existing only on the source drive will be copied. This command can be used to force environments to be in a certain condition (e.g., release server \u003c---\u003e production environment).\n/Version\tThis switch works in combination with the /Changed and /Newer switch. When a file already exist, Columbus will check the internal version number of the file to determine, if the file is different or older.\n/NoErrors\tThis switch causes copy functions to ignore errors caused by target files which cannot be overwritten. Errors caused by insufficient rights or disk space will still be reported.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n",
        "syntax": "EXPAND 'FromZIP' TO 'ToPath' [Patterns] [/{+-}R][/{+-}O] [[/Newer] ï¿½ [/Changed]] [/Version]] [/NoErrors] [/NoFileSystemRedirection]"
    },
    "regperm": {
        "add": " Regperm 'HKEY_LOCAL_MACHINE' 'Software\\MyApp' '%_GroupUsers%' 'M' 'Container' /Add /SubREGPERM \"HKEY_LOCAL_MACHINE\" \"Software\\test\" \"Users\" \"W\" \"Container\" /Sub",
        "example": "Regperm \"HKEY_LOCAL_MACHINE\" \"Software\\test\" \"Administrators,MyDomain\\_Columbus\" \"F\" \"Container\" /ReplaceAll /SubRegperm \"HKEY_LOCAL_MACHINE\" \"Software\\test\" \"Users\" \"W\" \"Container\" /SubRegperm 'HKEY_LOCAL_MACHINE' 'Software\\MyApp' '%_GroupUsers%' 'M' 'Container' /Add /Sub",
        "description": "Set permissions on registry keys.Not supported on Win9x.",
        "parameters": "Hive\tHKEY_LOCAL_MACHINE, HKEY_USERS, HKEY_CURRENT_USER or HKEY_CLASSES_ROOT\nTree\tSubkey inside the hive\nGroup/User\tUser name or group name\nRights\tF (Full), M (Write and Delete), W (Write), R (Read) or N (None), or any combination of the following words: QUERYVALUE, SETVALUE, CREATESUBKEY, ENUMSUBKEY, NOTIFY, CREATELINK, DELETE, WRITEDAC, WRITEOWNER, READCONTROL, FULLCONTROL\nFlags\tempty or CONTAINER\n/Sub\tSets security on key and existing subkeys\n/Replace\tReplaces the ACL instead of modifying it for the specified users/goups. The default security settings will be removed and only the specifyed security settings will be applied. Rights of other users/groups will not be affected, like the built in accounts System or Administrator\n/ReplaceAll\tReplaces the ACL instead of modifying it for all users/goups. So only the specified users/groups will have the specified rights and all others including built in system accounts will be removed. Be carefully using this powerful option. Consider to include the default system rights and accounts.\n/Add\tModifies the ACL, so these settings will be added to the existing security settings (this is the default when nothing is specified).\n/Remove\tRemoves the specified rights\n/NoErrors\tScript execution will continue, even when a critical errors occurs\n/Allowed\tThe specified rights will be granted to the user/groups. This is the default when nothing is specificed\n/Denied\tThe specified rights are explicetely denied to the specified users/groups. According to Windows security rules the tightest security setting wins. So a user will not get this right, even if he is also member of a group, which would give him those rights.\n\n\n\n\n\n\n",
        "syntax": "REGPERM 'HIVE' 'Tree' 'Group/User' 'Rights' 'Flags' [/Sub] [(/Replace /Add /ReplaceAll /Remove), Default is /Add] [/NoErrors] [(/Allowed /Denied), Default is /Allowed]"
    },
    "replace": {
        "add": " Replace '%MyVar%' '\\\\' '\\' 'MyVar' /Machine",
        "example": "Replace '%VarUser%' '\\\\' '\\' 'VarUser' /Machine",
        "description": "Accepts a variable as input and replaces a string in this variable with another and writes the new string to a new variable. This is useful for handling over variables between Windows Scripting Host scripts and Columbus scripts or when manipulation variables from the WMIRead command before writing them to the Columbus inventory.",
        "parameters": "Input\tValue, containing the string, which should be replaced. This can also be a variable\nStringToReplace\tString that will be replaced\nReplacement\tNew string that will replace StringToReplace\nOutputVariable\tVariable that contains the new value, where the string has been replaced. If the input has been a variable, the output can be written to the same variable. Then the variable will be overwriten with the new value.\n/Script\tVariable is only valid for the actual script\n/User\tVariable is set for the actually logged on user in his user space. Only valid for the UserAdd section of a package. In the ServerAdd or ClientAdd section of the package /User would be set for the Columbus account and not for the logged on user.\n/Machine\tVariable is set in the machine space. Best used in the ServerAdd and ClientAdd section of a package, for usage in the UserAdd section, Columbus must be able to write protected registry entries.\n/AllUsers\tVariable is set for all new users in the default user space. Best used in the ServerAdd and ClientAdd section of a package, for usage in the UserAdd section, Columbus must be able to write protected registry entries.\n/Immediate\tVariable will be active immediately even, when used in the ServerAdd section, instead of writing it to the machvars.wms and setting it for the ClientAdd section. Only necessary for set command in ServerAdd section. In all other sections variables are always active immediately.Only use for packages, which will be installed locally and not for server based installation.\n\n",
        "syntax": "REPLACE 'Input' 'StringToReplace' 'Replacement' 'OutputVariable'  [/User ï¿½ /Machine ï¿½ /AllUsers ï¿½ /Scipt] [/Immediate]"
    },
    "cd": {
        "add": " CD 'directory'",
        "example": "CD 'c:\\temp'CD '%AD%:%ADIR%\\WINWORD'",
        "description": "Sets the current directory to 'directory'.Note:[TAB]If the current drive is not 'directory', then the current drive is also changed.",
        "parameters": "Directory\t\tDrive and path to be set as current\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "CD 'directory' [[/NoFileSystemRedirection]"
    },
    "fileversion": {
        "add": " If FileVersion '%_Windows%\\Columbus.dll' !\u003c '0006.0005.0000.0000' Then Log 'Columbus is out of date or not installed.'",
        "example": "If FileVersion '%_Windows%\\Columbus.dll' !\u003c '0006.0005.0000.0000' Then Log 'Columbus is out of date or not installed.'",
        "description": "Process an action, based on the version of a file. The action may be a conditional jump (GOTO) or any other Columbus command.Note: The file version that you compare against must be in format '9999.9999.9999.9999'!",
        "parameters": "Filename\tName and path of the file\nCommand\tAny valid Columbus command\n\nSpecial operators:\n!\tForces expresion result to be TRUE if the file does not exist\n?\tForces expresion result to be False if the file does not exist\n\n",
        "syntax": "IF [NOT] FILEVERSION 'filename' '9999.9999.9999.9999' THEN command"
    },
    "setsystemrestorepoint": {
        "add": " SetSystemRestorePoint",
        "example": "SetSystemRestorePointSetSystemRestorePoint 'Installation of Service pack for Office'SetSystemRestorePoint /Daily",
        "description": "Creates a system restore point (if this feature is supported and enabled by the operating system)If the operation is successful the sequence number of the restore point will be saved in the variable %_LastSystemRestoreNumber%.",
        "parameters": "Description\tName of the system restore point. If omitted \"Columbus Restore point from \u003cDate\u003e\" will be used.\n/Daily\tCreates the system restore point only if for today no other System restore point has been created by Columbus.\n/NoErrors\t\tThis switch causes Columbus to ignore any errors during creating the System restore point.",
        "syntax": "SetSystemRestorePoint [Description] [/Daily] [/NoErrors]"
    },
    "load variables": {
        "add": " LOAD VARIABLES 'section' 'file' /Immediate",
        "example": "Load Variables 'AllMachines' '\\\\%_AdminServer%\\%_AdminShare%\\base.ini' /Immediate Where the base.ini could look as follows:[AllMachines]test1='This is a test value'test23='%SystemRoot%\\Test'",
        "description": "Load one or several Columbus variables from a file in INI-File syntax.Note: 'section' and 'file' can be passed in variables",
        "parameters": "section\t\tTitle of the section to be read\nFile\t\tFile containing the variables\n/Immediate\t\tAllows to make the variables immediately active, even if the command is used in a SERVERADD section of a package. This offers additional flexibility over the SET command\n/Machine\t\tLoads the variables into the machine environment, best used in the ClientAdd section. This is the default, if nothing is specified.\n/User\t\tLoads the variables into the user environment, only to be used in the UserAdd section\n/Volatile\t\tLoads the variables into the volatile environment, which will be deleted at next reboot. Best used for temporary variables in the ClientAdd or UserAdd section\n/Script\tvariable is only valid during the execution of the script, from which the command gets executed. Best used, when the variable is only needed temporarely.\n/NoFileSystemRedirection\n[TAB]\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n",
        "syntax": "Load Variables 'section' 'file' [/Machine ï¿½ /User] [/Immediate] [/Volatile] [/Script] [/NoFileSystemRedirection]"
    },
    ";": {
        "add": " ;[BLANK]",
        "example": "; This is a Remark",
        "description": "Anything following a semicolon '; ' is used as a remark and will not be interpreted.",
        "parameters": "",
        "syntax": "; any remark"
    },
    "changepw": {
        "add": " CHANGEPW '\\\\%COMPUTERNAME%' 'MyUser' 'MyPassword'",
        "example": "CHANGEPW '\\\\%COMPUTERNAME%' 'MyUser' 'MyPassword'CHANGEPW '' 'MYLocalUSER' 'H#6E7FAC34'CHANGEPW 'DOMBW' 'MYUSER' 'H#1234AC34'",
        "description": "Changes the password for a given user on the local machine or on the domain.",
        "parameters": "Domain\tName of the Domain where the user is located. If it is a local user account the field can be left blank. If a computername is specified it must be preceded by \"\\\\\".\nUser\tUserID\nPassword\tPassword to be set. If you wish to pass the password in encrypted form. You can prepare an encrypted string using the CRYPTIT utility and then enter the string as a parameter in the form \"H#01020304\".\n\n\n\n\n",
        "syntax": "CHANGEPW 'domain' 'user' 'password'"
    },
    "delete": {
        "add": " DELETE 'filename'",
        "example": "Delete '%TEMP%\\myfile.txt'Delete '%SystemRoot%\\winnt.bmp'",
        "description": "Deletes a file.If a file is locked if will be deleted using a reboot.",
        "parameters": "File\t\tPath and name of the file to be deleted\n/NoErrors\tThis switch causes delete functions to ignore errors caused by target files which cannot be deleted.\n\n/NoRebootOperations\t\n\t\tIf a file is in use and can't be deleted Columbus would normally initiate a pending file rename operation and delete that file at next reboot. With this switch set, Columbus will skip such files without an error - but not initiate any file rename operations (and therefore not delete the affected file).\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n  \n",
        "syntax": "DELETE 'file' [/NoErrors] [/NoRebootOperations] [/NoFileSystemRedirection]"
    },
    "path": {
        "add": " PATH 'path' /Add",
        "example": "PATH '%%SystemRoot%%\\system32;%%SystemRoot%%'PATH 'c:\\bin\\myapp' /AddPATH 'c:\\bin\\myapp' /Remove",
        "description": "Sets the absolute system search path, or adds and removes path fragments.",
        "parameters": "Pathstring\tAny valid path string. If no parameters are specified, the full path has to be given. Otherwise fragments to be appended or removed have to be specified.\n/Add\tAdd the specified string to the path, if it is not already included.\n/Remove\tRemove the specified string from the path, if it is still included.\n/User\tThis adds the path to the user-environment instead of the system environment. Default is the system path for the local computer.\n/NoFileSystemRedirection\n\t[TAB]On 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "PATH 'pathstring' [/Add ï¿½ /Remove] [/User] [/NoFileSystemRedirection]"
    },
    "log": {
        "add": " Log 'Now I can add messages from my Packages to the Columbus Log!' /Memory",
        "example": "Log 'Now I can add messages from my Packages to the Columbus Log!' /Memory",
        "description": "Adds a message to the Columbus log.",
        "parameters": "Message\t\tThe message that should get added to the log\n/Memory\t\tAdds - besides of the message - also the current memory status from Columbus to the log file\n\n",
        "syntax": "LOG 'message' [/Memory]"
    },
    "wait": {
        "add": " wait 5000",
        "example": "WAIT 5000[TAB][TAB]; wait 5 seconds",
        "description": "Wait for the specified time (in milliseconds), before continuing with the next script command.Note: No variables are allowed. The value has to be specified as an absolute integer.",
        "parameters": "Waittime\tMilliseconds to wait\n",
        "syntax": "WAIT waittime"
    },
    "unregisterfile": {
        "add": " UnRegisterFile '%_WindowsSystem%\\MyFile.Dll'",
        "example": "UnRegisterFile '%_WindowsSystem%\\Browseui.Dll'",
        "description": "Executes the SelfUnRegister routines within the specified file. If the file does not contain such routines an error is raised. Note: The file name does not support wirldcards (e.g. MFC*.DLL)",
        "parameters": "Filename\tThe file that should be unregistered. The file must exist and should contain the entry point \"DllUnRegisterServer\".\n/NoErrors\tIf a file is not found or does not contain SelfUnregister routines no error is raised, script execution will continue\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n",
        "syntax": "UnRegisterFile 'Filename' [/NoErrors] [/NoFileSystemRedirection]"
    },
    "diskfree": {
        "add": " If Not DiskFree 'C:'\u003e'10000000' then exit 'less then 10 MB diskspace free'",
        "example": "If Not DiskFree 'C:'\u003e'10000000' then exit 'less then 10 MB diskspace free'",
        "description": "Process an action, based on the size of available disk space (specify size in bytes). The action may be a conditional jump (GOTO) or any other Columbus command.",
        "parameters": "Command\tAny valid Columbus command\nDrive\tDrive where the available diskspace should be checked\nSize\tSize in Bytes\n\n",
        "syntax": "IF [NOT] DISKFREE 'drive' <|>|= 'size' THEN command"
    },
    "iniwrite": {
        "add": " INIWRITE 'section' 'key' 'value' 'file'",
        "example": "INIWRITE 'intl' 'sLanguage' 'eng'INIWRITE 'Microsoft Word 2.0' '{NIL}' '{NIL}'INIWRITE 'dBASE Files' 'Driver32' '%_WindowsSystem%\\odbcjt32.dll' '%_Windows%\\ODBC.INI'",
        "description": "Write/Delete entries in a file in the INI file format. If the path to the directory does not exist, where to INI file should be written, Columbus will try to create it automatically.Note: Section, key, value, and file must be enclosed within string delimiters if they should represent a value. Using {NIL} instead of value causes the key to be deleted. Using {NIL} instead of the key and the value causes the section to be deleted.",
        "parameters": "Section\t\tTitle of the section to be modified\nKey\t\tKey to be modified\nValue\t\tValue to be written\nFile\t\tFilename; if none specified, then WIN.INI is assumed. If no path is specified, then the Windows user directory is assumed.\n/NoErrors\t\tThis switch causes iniwrite functions to ignore errors caused by target files which cannot be written in.\n/NoFileSystemRedirection\n[TAB]\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "INIWRITE 'section' 'key' 'value' ['file'] [/NoErrors] [/NoFileSystemRedirection]"
    },
    "run64": {
        "add": " RUN64 'program' '' '' SHOW WAITDOWN TASK:60",
        "example": "Run64 'Notepad.exe' '%_WindowsSystem64%\\Drivers\\etc\\Hosts' '' show waitdown task:2Note the double quotes because of the blank in the pathname:Run64 '\"c:\\program files\\test\\Notepad.exe\"' '\"c:\\temp\\test file.txt\"' '' show",
        "description": "Runs an external 64Bit program 'program' with optional parameters.Note that the parameters slightly differ from the Run parameter!The Windows API has special requirements when dealing with directory or filenames, which contain blank characters. To allow running programs in such paths, you have to enclose the program's path and filename in double quotes (see example below). To avoid confusion you can add such double quotes to all RUN statements, even if you do not expect blanks in the path or filename. If you have to pass parameters to the program, which may again include blanks, then you will have to treat them the same way.On Windows NT, performing a Run command in the ClientAdd or ServerAdd section of a package will not be shown on screen no matter if you use the SHOW or HIDE parameter because these commands are performed in NTs system space. If you need to monitor such tasks for debugging purpose, you should first set the Columbu services to 'Allow Interact with Desktop' and reboot your workstation. The Errorlevel of the application you ran is available in %_ErrorLevelRun% if you start the program with the WAITDOWN TASK parameter.When starting a task with the RUN command, this task will be executed under the account of the Columbus user (Server- and Client sections) or under the authority of the currently logged on user (User sections). Within the server and client sections you can use the /System switch telling Columbus to execute a program under the local System authority (attention: tasks under the System autority have no access to the network!)",
        "parameters": "Program\tProgram (incl. Parameters) to be started. Must be enclosed in string delimiters.\nMode\tRun-mode of the application. Allowed values are \n\tSHOW, HIDE, MINIMIZE, and MAXIMIZE\nWAITDOWN TASK\tWait until specified task has become inactive. Waitdown Task:xxx waits a maximum of xxx minutes, then it continues with the operation of the script.\n/System\tRun the program under the System authority instead of using the Columbus account. This should be used only in Server and Client sections.\n/OnTimeoutReboot\tWhen using Waitdown Task:xxx and the task will not be terminated when the timeout occurs then an immediate reboot will be signalled. Attention: This could cause a situation where Columbus will reboo forever!\n/DesktopInteractionRequired \tSome installation routines need an interaction with desktop of the currently user to execute properly. By default this is not possible when a program is called from the Server or Client part of the package, because this gets executed by the Columbus service in the background. When this switch is used the Columbus client starts a helper service, which can interact with the desktop, but still has administrative rights. The helper service executes the program and after the execution it gets removed by the Columbus Client again.\n\tRequirement: the file ColiSvc.exe must be present in the same folder as the Columbus.exe\n/DisableInput\tIf DesktopInteractionRequired is used, keyboard and mouse input from the logged on user can be disabled during installation, so that the user cannot interfere with the installation procedure.\n/NoErrors\tThis switch causes the client to ignore errors that might be returned from the executed program.\n/NoFileSystemRedirection\n\t[TAB]On 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "RUN64 'program' 'parameters' 'starting directory' [mode [WAITDOWN TASK[Wait timeout] [/System]] [/OnTimeoutReboot]] [/NoErrors] [/DesktopInteractionRequired] [/DisableInput] [/NoFileSystemRedirection]"
    },
    "goto": {
        "add": " GOTO 'label'",
        "example": "[Install]...GOTO Keyb_US...:Keyb_US...[Start]",
        "description": "Continues execution at line label within the same section of the current script. The label has to be marked with ':label'.",
        "parameters": "Label\tLabel within the same section of the current script at which execution will continue. Incorrect labels will cause a script to abort. Label names have to be one word (although you can combine them with '_') of a maximum length of 100 characters (short labels are recommended for reasons of speed). A label name must be unique within a script section. Upper/Lowercase is ignored.",
        "syntax": "GOTO label"
    },
    "file": {
        "add": " If Not File '%Temp%\\test.txt' Then GoTo TEST",
        "example": "If Not File '%Temp%\\test.txt' Then GoTo TESTGoTo END:TESTIf File '%Temp%\\test.txt' Then Delete '%Temp%\\test.txt':ENDIf Not File '%_ProgramFiles%\\Microsoft Internet\\iexplore.exe' then exit 'Internet Explorer must be installed too'",
        "description": "Process an action, based on the existence or absence of a certain file, file pattern. The action may be a conditional jump (GOTO) or any other Columbus command.",
        "parameters": "Filename\tName and path of the file (or pattern) to be verified\nCommand\tAny valid Columbus command\n\n",
        "syntax": "IF [NOT] FILE 'filename' THEN command"
    },
    "regread": {
        "add": " REGREAD 'mainkey' 'subkey' 'valname' 'variable name'",
        "example": "Reading the Language settings of a user into a variable %UsrLanguage%:RegRead 'Hkey_Current_User' 'Software\\Microsoft\\International' 'sLanguage' 'UsrLanguage' /User",
        "description": "Allows to retrieve the value of a 'REG_SZ' style registry value (REG_SZ, REG_EXPAND_SZ or REG_DWORD) into a Columbus variable.",
        "parameters": "mainkey\t\tOne of the valid registry hives:\nHKey_Classes_Root\nHKey_Current_User\nHKey_Users\nHKey_Local_Machine\nHKey_Current_Config\n\nSubkey\t\tSubkey inside the hive to be built or to be opened for adding a value\n\t (i.e., Software\\Microsoft\\Notepad).  Note: Subkeys have no leading backslash.\nvalname\t\tName of a value inside the specified tree. The value should beither of type REG_SZ, REG_DWORD or REG_EXPAND_SZ.\n\t\tIf you are not sure of the type, use REGEDT32 in NT to check or REGEDIT in Win9x.\nVariable Name\t\tName of the variable where the result shall be stored without %..% signs.\n/Script\t\tVariable is only valid for the actual script\n/User\t\tVariable is set for every user in the user space\n/Machine\t\tVariable is set in the machine space. This is the default, when no parameter is specified.\n/Immediate\t\tAllows to make the variables immediately active (required when using within Server part of scripts).\n\n",
        "syntax": "REGREAD 'mainkey' 'subkey' 'valname' 'variable name' [/Script ï¿½ /User ï¿½ /Machine] /Immediate [/Volatile]"
    },
    "run": {
        "add": " RUN 'program' SHOW WAITDOWN TASK:60",
        "example": "Run 'Notepad.exe' show waitdown taskNote the double quotes because of the blank in the pathname:Run '\"c:\\program files\\test\\Notepad.exe\" \"c:\\temp\\test file.txt\"' showRun 'net use G: \\\\brainware3\\demo' show waitdown taskRun 'connect.cmd'",
        "description": "Runs an external program 'program' with optional parameters.Note: The Windows API has special requirements when dealing with directory or filenames, which contain blank characters. To allow running programs in such paths, you have to enclose the program's path and filename in double quotes (see example below). To avoid confusion you can add such double quotes to all RUN statements, even if you do not expect blanks in the path or filename. If you have to pass parameters to the program, which may again include blanks, then you will have to treat them the same way.On Windows NT, performing a Run command in the ClientAdd or ServerAdd section of a package will not be shown on screen no matter if you use the SHOW or HIDE parameter because these commands are performed in NTs system space. If you need to monitor such tasks for debugging purpose, you should first set the Columbu services to 'Allow Interact with Desktop' and reboot your workstation. The Errorlevel of the application you ran is available in %_ErrorLevelRun% if you start the program with the WAITDOWN TASK parameter.When starting a task with the RUN command, this task will be executed under the account of the Columbus user (Server- and Client sections) or under the authority of the currently logged on user (User sections). Within the server and client sections you can use the /System switch telling Columbus to execute a program under the local System authority (attention: tasks under the System autority have no access to the network!)",
        "parameters": "Program\tProgram (incl. Parameters) to be started. Must be enclosed in string delimiters.\nMode\tRun-mode of the application. Allowed values are \n\tSHOW, HIDE, MINIMIZE, and MAXIMIZE\nWAITDOWN TASK\tWait until specified task has become inactive. Waitdown Task:xxx waits a maximum of xxx minutes, then it continues with the operation of the script.\n/System\tRun the program under the System authority instead of using the Columbus account. This should be used only in Server and Client sections.\n/OnTimeoutReboot\tWhen using Waitdown Task:xxx and the task will not be terminated when the timeout occurs then an immediate reboot will be signalled. Attention: This could cause a situation where Columbus will reboo forever!\n/DesktopInteractionRequired \tSome installation routines need an interaction with desktop of the currently user to execute properly. By default this is not possible when a program is called from the Server or Client part of the package, because this gets executed by the Columbus service in the background. When this switch is used the Columbus client starts a helper service, which can interact with the desktop, but still has administrative rights. The helper service executes the program and after the execution it gets removed by the Columbus Client again.\n\tRequirement: the file ColiSvc.exe must be present in the same folder as the Columbus.exe\n/DisableInput\tIf DesktopInteractionRequired is used, keyboard and mouse input from the logged on user can be disabled during installation, so that the user cannot interfere with the installation procedure.\n/NoErrors\tThis switch causes the client to ignore errors that might be returned from the executed program.\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)\n\n",
        "syntax": "RUN 'program' [mode [WAITDOWN TASK[Wait timeout] [/System]] [/OnTimeoutReboot]] [/NoErrors] [/DesktopInteractionRequired] [/DisableInput] [/NoFileSystemRedirection]"
    },
    "group": {
        "add": " If Group '%_DomainUser%' Then Goto INSTALL",
        "description": "Process an action in the user part of the package, based on the membership of a certain user group. The action may be a conditional jump (GOTO) or any other Columbus command.Note: Only use in the [UserAdd] and [UserRemove] section of the package. Otherwise the group membership of the Columbus account will be checked!",
        "parameters": "Groupname\tName of the local or global NT usergroup. For built in groups the usage of the corresponding Columbus variables is recommended, because group names are language specific!\n\n",
        "syntax": "IF [NOT] GROUP 'groupname' THEN command",
        "example": "If Group '%_DomainUser%' Then Goto INSTALLIf Not Group 'XYZ' Then Exit 'User must be member of group XYZ'"
    },
    "registerfile": {
        "add": " RegisterFile '%_WindowsSystem%\\MyFile.Dll'",
        "example": "RegisterFile '%_WindowsSystem%\\Browseui.Dll'RegisterFile '%_WindowsSystem%\\asctrls.ocx' /NoErrors",
        "description": "Executes the Selfregister routines within the specified file. If the file does not contain such routines an error is raised. Note: The file name does not support wildcards (e.g. *.MFC or *.DLL)",
        "parameters": "Filename\tThe file that should be selfregistered. The file must exist and should contain the entry point \"DllRegisterServer\".\n/NoErrors\tIf a file is not found or does not contain Selfregister routines no error is raised, script execution will continue\n/NoFileSystemRedirection\n\tOn 64Bit operating system: do not turn off file system redirection (even if %_WindowsSystem64% is used)",
        "syntax": "RegisterFile 'Filename' [/NoErrors] [/NoFileSystemRedirection]"
    },
    "set": {
        "add": " SET variable = 'value'",
        "example": "Set ReleaseName = 'My first Release'Set TEMP = '%TEMP%\\myTemp' /MachineSet pgmOffice='C:\\Program Files\\Microsoft Office' /MachineSet spgmOffice='C:\\Program Files\\Microsoft Office' /8.3 /MachineSet MyOldVariable /Delete /User",
        "description": "Sets a string variable to the desired value. Variables can be User- or Machine-specific, but will be combined at the time of script execution. There is no limit to the number of allowed variables, but the name of a variable cannot be longer than 100 characters.Set /Delete deletes a variable.",
        "parameters": "variable\tName of the variable (up to 20 characters including the ‘$’ sign).\nvalue\tValue of the variable to be set. Allowed values are strings ('....'), environment variables  %...%), and other WinScript variables. All of these types can be mixed together. The entire value has to be enclosed in single quotes ('). If single quotes are part of the text string, then double quotes (\") can be used instead.\n/Script\tVariable is only valid for the actual script\n/User\tVariable is set for every user in the user space\n/AllUser\tVariable is set for all users in the default user space\n/Machine \tVariable is set in the machine space. This is the default, when no parameter is specified.\n/Immediate\tAllows to make the variables immediately active (required when using within Server part of scripts).\n/Volatile\tVariable is only valid until the next reboot\n/8.3\tVariable is converted to 8.3 (e.g. C:\\Program Files\\Microsoft Office would get converted to C:\\PROGRA~1\\MICROS~1)\n/Delete\tDeletes a variable\n\n",
        "syntax": "SET variable = value /Script /User /AllUser /Machine /Immediate /Volatile /8.3 [/Delete] "
    },
    "wmireadlist": {
        "add": " WMIREADLIST '' 'Win32_Printer' 'Caption' '' ';' 'PrinterList' /Immediate /Machine",
        "example": "WMIREADLIST '' 'Win32_Printer' 'Caption' 'where Caption like \"%%PDF%%\"' ';' 'PDFPrinters' /Immediate /MachineWMIREADLIST '' 'Win32_Printer' 'Caption' '' ';' 'PrinterList' /Immediate /Machine",
        "description": "Allows to read any WMI inventory data and returns the value(s) in a Columbus variable for use in scripts or forwarding it to the Columbus Console.WMI (Windows Management Instrumentation) is the standard access interface to Windows Inventory data including Hardware, Configuration or installed Software. WMI is available by default on Windows 2000/XP. In order to use it on Windows NT4, you need to download WMI components from Microsoft free of charge.Using \"WMIRead\" will allow you to bind installation decisions to inventory parameters (e.g. 'if memory is higher than n and network adapter is y then install). Also you may use \"WMIRead\" in combination with the \"WriteInventory\" command to forward the retrieved values to the Columbus consoles feedback file.",
        "parameters": "Machine\tName of the machine where the query should take place. In the moment only the current machine is supported, so this value has to be empty or a dot \".\".\nWMIClass\tName of the WMI class to be queried\nWMIproperty\tName of the property of the specified class that should be evaluated. Every class can have a lot of properties.\nWQLStatement\tWQL statement to make the selection more precise. WMI supports a subset of SQL for queries, if a class can have more values, for instance installed printers.\nSeparator\tSeparator to be used for combining the values.\nVariableName\tThe name of the variable that the retrieved value should be assigned to\n/Immediate\tNeeded if a value gets read in the ServerAdd section and should be used in the same or other ServerAdd section(s). Causes the variable to be set immediately instead of beeing written to the machvars.wms, where it would be available in the ClientAdd section\n/Machine\tVariable set in the machine part. This is the default\n/User\tWhen the command is used in the UserAdd section and the user has no write access to the machine hive of the registry, this option must be used. Sets the variable in the user hive of the registry\n\n\n\n",
        "syntax": "WMIReadList 'machine' 'wmiclass' 'wmiproperty' 'wqlstatement' 'Separator' 'VariableName' [/Immediate ï¿½ /Machine ï¿½ /User]"
    },
    "return": {
        "add": " RETURN",
        "example": "if '%MyVar%'='' then GOTO SetVar Iniwrite 'Debug' 'Myvar' '%MyVar%'Goto End :SetVarSet Myvar='Set in Subroutine'RETURN:End",
        "description": "Can be used only in combination with GOTO command. If after a GOTO operation a RETURN is found, control goes back to the line following the GOTO Command",
        "parameters": "",
        "syntax": "Return"
    },
    "shareddllcounter": {
        "add": " SharedDLLCounter '%_WindowsSystem%\\mydll.dll' /Inc:1",
        "example": "Upcount a SharedDLLCounter (+1):SharedDLLCounter '%_WindowsSystem%\\qchain.exe' /Inc:1Decount a SharedDLLCounter (-2):SharedDLLCounter '%_WindowsSystem%\\qchain.exe' /Dec:2",
        "description": "Creates / updates the registry entry counting the usage of shared components",
        "parameters": "FileName\tThe file name of the shared component that should be treated.\n/Inc\tIncreases the usage counter by 1.\n/Dec\tDecreases the usage counter by 1.\n/Inc:xx\tIncreases the usage counter by xx.\n/Dec:xx\tDecreases the usage counter by xx.\n/NoErrors\t\tThis switch causes Columbus to ignore any errors during setting the Shared Dll counter.",
        "syntax": "SharedDLLCounter FileName /Inc /Dec /Inc:xx /Dec:xx [/NoErrors]"
    }
}

